# to tell travis that we need admin privilege
sudo: required
language: generic
# to tell travis which service is required
services:
  - docker
# hooks to tell what need to be done before install
before_install:
# give the command that we want to run.
# -t --> adding a tag for the image that will be generated after the build
# We can give tag any name e.g. test, myimage etc. but its convention to use
# github username/repo name
# this tag then can be referred in the .travis.yml file to refer to the image ID
  - docker build -t myimage -f Dockerfile.dev .
# to tell which commands needs to be run
script:
#              additional variables to be compatible with jest library
  - docker run -e CI=true myimage npm run test
# how to take our application and deploy it to AWS
deploy:
  # deploy on EBS
  provider: elasticbeanstalk
  region: "us-east-2"
  app: "docker-react"
  env: "DockerReact-env"
  bucket_name: "elasticbeanstalk-us-east-2-795393899311"
  # when we first created the EBS, bucket path(folder) may not be there,hence give it same as app
  bucker_path: "docker-react"
  # only deploy app if the code is pushed on to the master branch
  on:
    branch: master
  # taking access_key_id and secret_Access_key of the user that we created in AWS
  # from travis-ci environment variables
  # Remeber we had to add these environment variables first in the travis-ci
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY